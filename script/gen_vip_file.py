# import binascii
# -*-coding:UTF-8-*-

import os
# import sys

###################################################################################################
# history
# v0.1 2022-02-07 wangxinxin
# generate testbench/vip dir:all file and all vip dir
###################################################################################################

print("hello gen_vip_file")


class gen_vip_file:

    def __init__(self, tb_name, InArray, novifArray, module_name):
        self.tb_name = tb_name
        self.InArray = InArray
        self.novifArray = novifArray
        self.module_name = module_name
        self.local_dir = os.getcwd()

    def f_gen_vip_trans(self, InArray):
        print("gen %s_trans.sv" % (InArray[0]))
#        os.chdir(self.local_dir)
        file_name = InArray[0]+"_trans.sv"
        self.f_file = open(file_name, "w+")

        self.f_file.write("`ifndef _%s_TRANSACTION_V_                                       \n" % (InArray[0].upper()))
        self.f_file.write("`define _%s_TRANSACTION_V_                                       \n" % (InArray[0].upper()))
        self.f_file.write("                                                                 \n")
        self.f_file.write("class %s_trans extends uvm_sequence_item;                        \n" % InArray[0])
        self.f_file.write("     //rand logic[7:0] vald0[$];                                 \n")
        self.f_file.write("                                                                 \n")
        self.f_file.write("     `uvm_object_utils_begin(%s_trans)                           \n" % InArray[0])
        self.f_file.write("     `uvm_object_utils_bend                                      \n")
        self.f_file.write("                                                                 \n")
        self.f_file.write("     function new(string name =\" %s_event\");                   \n" % InArray[0])
        self.f_file.write("         super.new(name);                                        \n")
        self.f_file.write("     endfunction                                                 \n")
        self.f_file.write("                                                                 \n")
        self.f_file.write("     //example:extern function pack_data();                      \n")
        self.f_file.write("     //add function here                                         \n")
        self.f_file.write("                                                                 \n")
        self.f_file.write("endclass                                                         \n")
        self.f_file.write("                                                                 \n")
        self.f_file.write("`endif                                                           \n")
        self.f_file.close()

    def f_gen_vip_seqr(self, InArray):
        print("gen %s_sequencer.sv" % (InArray[0]))
#       os.chdir(self.local_dir)
        file_name = InArray[0]+"_sequencer.sv"
        self.f_file = open(file_name, "w+")

        self.f_file.write("`ifndef _%s_SEQUENCER_V_                                                 \n" % (InArray[0].upper()))
        self.f_file.write("`define _%s_SEQUENCER_V_                                                 \n" % (InArray[0].upper()))
        self.f_file.write("                                                                         \n")
        self.f_file.write("class %s_sequencer extends uvm_sequencer#(%s_trans);                     \n" % (InArray[0], InArray[0]))
        self.f_file.write("                                                                         \n")
        self.f_file.write("     function new(string name =\" %s_sequencer\",uvm_component parent);  \n" % InArray[0])
        self.f_file.write("         super.new(name);                                                \n")
        self.f_file.write("     endfunction                                                         \n")
        self.f_file.write("                                                                         \n")
        self.f_file.write("     `uvm_component_utils(%s_sequencer)                                  \n" % InArray[0])
        self.f_file.write("                                                                         \n")
        self.f_file.write("endclass                                                                 \n")
        self.f_file.write("                                                                         \n")
        self.f_file.write("`endif                                                                   \n")
        self.f_file.close()

    def f_gen_vip_dvr(self, InArray):
        print("gen %s_driver.sv" % (InArray[0]))
        #        os.chdir(self.local_dir)
        file_name = InArray[0] + "_driver.sv"
        self.f_file = open(file_name, "w+")

        self.f_file.write("`ifndef _%s_DRIVER_V_                                                        \n" % (InArray[0].upper()))
        self.f_file.write("`define _%s_DRIVER_V_                                                        \n" % (InArray[0].upper()))
        self.f_file.write("                                                                             \n")
        self.f_file.write("class %s_driver extends uvm_driver#(%s_trans);                               \n" % (InArray[0], InArray[0]))
        self.f_file.write("                                                                             \n")
        self.f_file.write("     typedef virtual %s_vif  v_if;                                           \n" % InArray[0])
        self.f_file.write("                      v_if   %s;                                             \n" % (InArray[0].upper()))
        self.f_file.write("                                                                             \n")
        self.f_file.write("     `uvm_component_utils_begin(%s_driver)                                   \n" % InArray[0])
        self.f_file.write("     `uvm_component_utils_end                                                \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("     function new(string name =\" %s_driver\",uvm_component parent=null);    \n" % InArray[0])
        self.f_file.write("         super.new(name);                                                    \n")
        self.f_file.write("     endfunction                                                             \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("     extern virtual function void build_phase(uvm_phase phase);              \n")
        self.f_file.write("     extern virtual function void end_of_elaboration_phase(uvm_phase phase); \n")
        self.f_file.write("     extern virtual function void start_of_simulation_phase(uvm_phase phase);\n")
        self.f_file.write("     extern virtual function void connect_phase(uvm_phase phase);            \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("     extern virtual task          reset_phase(uvm_phase phase);              \n")
        self.f_file.write("     extern virtual task          configure_phase(uvm_phase phase);          \n")
        self.f_file.write("     extern virtual task          run_phase(uvm_phase phase);                \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("     extern protected virtual task get_and_drive();                          \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("endclass                                                                     \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("function void %s_driver::build_phase(uvm_phase phase);                       \n" % InArray[0])
        self.f_file.write("     super.build_phase(phase);                                               \n")
        self.f_file.write("endfunction                                                                  \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("function void %s_driver::connect_phase(uvm_phase phase);                     \n" % InArray[0])
        self.f_file.write("     super.connect_phase(phase);                                             \n")
        self.f_file.write("     uvm_config_db#(v_if)::get(this,\"\",\"%s_vif\",%s)                      \n" % (InArray[0], InArray[0].upper()))
        self.f_file.write("endfunction                                                                  \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("function void %s_driver::end_of_elaboration_phase(uvm_phase phase);          \n" % InArray[0])
        self.f_file.write("     super.end_of_elaboration_phase(phase);                                  \n")
        self.f_file.write("     if(%s==null)                                                            \n" % InArray[0].upper())
        self.f_file.write("         `uvm_fatal(\"No_conn\",\"virtual port no connected t actual interface instance\"); \n")
        self.f_file.write("endfunction                                                                  \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("function void %s_driver::start_of_simulation_phase(uvm_phase phase);         \n" % InArray[0])
        self.f_file.write("     super.start_of_simulation_phase(phase);                                 \n")
        self.f_file.write("endfunction                                                                  \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("task %s_driver::reset_phase(uvm_phase phase);                                \n" % InArray[0])
        self.f_file.write("     super.reset_phase(phase);                                               \n")
        self.f_file.write("     phase.raise_objection(this,\"\");                                       \n")
        self.f_file.write("     //add here                                                              \n")
        self.f_file.write("     phase.drop_objection(this,\"\");                                        \n")
        self.f_file.write("endftask                                                                     \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("task %s_driver::configure_phase(uvm_phase phase);                            \n" % InArray[0])
        self.f_file.write("     super.configure_phase(phase);                                           \n")
        self.f_file.write("     phase.raise_objection(this,\"\");                                       \n")
        self.f_file.write("     //add here                                                              \n")
        self.f_file.write("     phase.drop_objection(this,\"\");                                        \n")
        self.f_file.write("endtask                                                                      \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("task %s_driver::run_phase(uvm_phase phase);                                  \n" % InArray[0])
        self.f_file.write("     super.run_phase(phase);                                                 \n")
        self.f_file.write("     //add here                                                              \n")
        self.f_file.write("     get_and_drive();                                                        \n")
        self.f_file.write("endtask                                                                      \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("task %s_driver::get_and_drive();                                             \n" % InArray[0])
        self.f_file.write("     %s_trans    tr;                                                         \n" % InArray[0])
        self.f_file.write("     int         length;                                                     \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("     forever                                                                 \n")
        self.f_file.write("         begin                                                               \n")
        self.f_file.write("             seq_item_port.get_next_item(tr);                                \n")
        self.f_file.write("             //tr.print();                                                   \n")
        self.f_file.write("             //@(posedge drv_if.clk);                                        \n")
        self.f_file.write("             //for(int i=0;i<length;i++)                                     \n")
        self.f_file.write("             //  begin                                                       \n")
        self.f_file.write("             //      drv_if.RXCLK=0;                                         \n")
        self.f_file.write("             //      drv_if.RXDATA=tr.packet.pop_front();                    \n")
        self.f_file.write("             //      @(posedge drv_if.clk);                                  \n")
        self.f_file.write("             //      drv_if.RXCLK=1;                                         \n")
        self.f_file.write("             //      #80ns;                                                  \n")
        self.f_file.write("             //      drv_if.RXCLK=0;                                         \n")
        self.f_file.write("             //      @(posedge drv_if.clk);                                  \n")
        self.f_file.write("             //  end                                                         \n")
        self.f_file.write("             seq_item_port.item_done();                                      \n")
        self.f_file.write("         end                                                                 \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("endtask                                                                      \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("`endif                                                                       \n")
        self.f_file.close()

    def f_gen_vip_monr(self, InArray):
        print("gen %s_driver.sv" % (InArray[0]))
        #        os.chdir(self.local_dir)
        file_name = InArray[0] + "_monitor.sv"
        self.f_file = open(file_name, "w+")

        self.f_file.write("`ifndef _%s_MONITOR_V_                                                       \n" % (InArray[0].upper()))
        self.f_file.write("`define _%s_MONITOR_V_                                                       \n" % (InArray[0].upper()))
        self.f_file.write("                                                                             \n")
        self.f_file.write("class %s_monitor extends uvm_monitor;                                        \n" % InArray[0])
        self.f_file.write("                                                                             \n")
        self.f_file.write("     uvm_analysis_port#(%s_trans)    mon_analysis_port;                      \n" % InArray[0])
        self.f_file.write("     typedef virtual %s_vif          v_if;                                   \n" % InArray[0])
        self.f_file.write("                     v_if            %s;                                     \n" % InArray[0])
        self.f_file.write("                     %s_config       %s_cfg;                                 \n" % (InArray[0], InArray[0]))
        self.f_file.write("                     %s_trans        glo_trr;                                \n" % InArray[0])
        self.f_file.write("                                                                             \n")
        self.f_file.write("     `uvm_component_utils_begin(%s_monitor)                                  \n" % InArray[0])
        self.f_file.write("     `uvm_component_utils_end                                                \n" )
        self.f_file.write("                                                                             \n")
        self.f_file.write("     function new(string name =\" %s_monitor\",uvm_component parent=null);   \n" % InArray[0])
        self.f_file.write("         super.new(name);                                                    \n")
        self.f_file.write("     endfunction                                                             \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("     extern virtual function void build_phase(uvm_phase phase);              \n")
        self.f_file.write("     extern virtual function void end_of_elaboration_phase(uvm_phase phase); \n")
        self.f_file.write("     extern virtual function void start_of_simulation_phase(uvm_phase phase);\n")
        self.f_file.write("     extern virtual function void connect_phase(uvm_phase phase);            \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("     extern virtual task          reset_phase(uvm_phase phase);              \n")
        self.f_file.write("     extern virtual task          configure_phase(uvm_phase phase);          \n")
        self.f_file.write("     extern virtual task          run_phase(uvm_phase phase);                \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("     extern protected virtual task %s_monitor();                             \n" % InArray[0])
        self.f_file.write("                                                                             \n")
        self.f_file.write("endclass                                                                     \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("function void %s_monitor::build_phase(uvm_phase phase);                      \n" % InArray[0])
        self.f_file.write("     super.build_phase(phase);                                               \n")
        self.f_file.write("     mon_analysis_port=new(\"mon_analysis_port\",this);                      \n")
        self.f_file.write("endfunction                                                                  \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("function void %s_monitor::connect_phase(uvm_phase phase);                    \n" % InArray[0])
        self.f_file.write("     super.connect_phase(phase);                                             \n")
        self.f_file.write("     uvm_config_db#(v_if)::get(this,\"\",\"%s_vif\",%s)                      \n" % (InArray[0], InArray[0].upper()))
        self.f_file.write("endfunction                                                                  \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("function void %s_monitor::end_of_elaboration_phase(uvm_phase phase);         \n" % InArray[0])
        self.f_file.write("     super.end_of_elaboration_phase(phase);                                  \n")
        self.f_file.write("     if(%s==null)                                                            \n" % InArray[0].upper())
        self.f_file.write("         `uvm_fatal(\"No_conn\",\"virtual port no connected t actual interface instance\"); \n")
        self.f_file.write("endfunction                                                                  \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("function void %s_monitor::start_of_simulation_phase(uvm_phase phase);        \n" % InArray[0])
        self.f_file.write("     super.start_of_simulation_phase(phase);                                 \n")
        self.f_file.write("endfunction                                                                  \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("task %s_monitor::reset_phase(uvm_phase phase);                               \n" % InArray[0])
        self.f_file.write("     super.reset_phase(phase);                                               \n")
        self.f_file.write("     phase.raise_objection(this,\"\");                                       \n")
        self.f_file.write("     //add here                                                              \n")
        self.f_file.write("     phase.drop_objection(this,\"\");                                        \n")
        self.f_file.write("endtask                                                                      \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("task %s_monitor::configure_phase(uvm_phase phase);                           \n" % InArray[0])
        self.f_file.write("     super.configure_phase(phase);                                           \n")
        self.f_file.write("     phase.raise_objection(this,\"\");                                       \n")
        self.f_file.write("     //add here                                                              \n")
        self.f_file.write("     phase.drop_objection(this,\"\");                                        \n")
        self.f_file.write("endftask                                                                     \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("task %s_monitor::run_phase(uvm_phase phase);                                 \n" % InArray[0])
        self.f_file.write("     super.run_phase(phase);                                                 \n")
        self.f_file.write("     //add here                                                              \n")
        self.f_file.write("     %_monitor();                                                            \n")
        self.f_file.write("endtask                                                                      \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("task %s_monitor::%s_monitor();                                               \n" % (InArray[0], InArray[0]))
        self.f_file.write("     %s_trans    tr;                                                         \n" % InArray[0])
        self.f_file.write("     int         cnt;                                                        \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("     //forever                                                               \n")
        self.f_file.write("     //  begin                                                               \n")
        self.f_file.write("     //      @(posedge mon_if.TXON or posedge mon_if.RXON);                  \n")
        self.f_file.write("     //      begin                                                           \n")
        self.f_file.write("     //          tr=new();                                                   \n")
        self.f_file.write("     //          while(mon_if.RXON)                                          \n")
        self.f_file.write("     //              if(mon_if.RXCLK)                                        \n")
        self.f_file.write("     //                  begin                                               \n")
        self.f_file.write("     //                      tr.package.push_back(mon_if.RXDATA);            \n")
        self.f_file.write("     //                  end                                                 \n")
        self.f_file.write("     //               else                                                   \n")
        self.f_file.write("     //                   ...                                                \n")
        self.f_file.write("     //      end                                                             \n")
        self.f_file.write("     //  end                                                                 \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("     //tr.print_full();                                                      \n")
        self.f_file.write("     //                                                                      \n")
        self.f_file.write("     //mon_analysis_port.write(tr);                                          \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("endtask                                                                      \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("`endif                                                                       \n")
        self.f_file.close()

    def f_gen_vip_vif(self, InArray):
        print("gen %s_vif.sv" % (InArray[0]))
        #        os.chdir(self.local_dir)
        file_name = InArray[0] + "_vif.sv"
        self.f_file = open(file_name, "w+")

        self.f_file.write("`ifndef _%s_VINTERFACE_V_                                                    \n" % (InArray[0].upper()))
        self.f_file.write("`define _%s_VINTERFACE_V_                                                    \n" % (InArray[0].upper()))
        self.f_file.write("                                                                             \n")
        self.f_file.write("interface %s_vif(input bit clk,input rst);                                   \n" % InArray[0])
        self.f_file.write("                                                                             \n")
        for j in range(len(InArray)-1):
            string = str(InArray[j+1])
            string = string.replace("input", "logic")
            string = string.replace("output", "logic")
            string = string.replace(",", ";")
            self.f_file.write(string)
        self.f_file.write("endinterface                                                                 \n")
        self.f_file.write("                                                                             \n")
        self.f_file.write("`endif                                                                       \n")
        self.f_file.close()

    def f_gen_vip_agent(self, InArray):
        print("gen %s_agent.sv" % (InArray[0]))
        #        os.chdir(self.local_dir)
        file_name = InArray[0] + "_agent.sv"
        self.f_file = open(file_name, "w+")

        self.f_file.write("`ifndef _%s_AGENT_V_                                                                 \n" % (InArray[0].upper()))
        self.f_file.write("`define _%s_AGENT_V_                                                                 \n" % (InArray[0].upper()))
        self.f_file.write("                                                                                     \n")
        self.f_file.write("class %s_agent extends uvm_magent;                                                   \n" % InArray[0])
        self.f_file.write("                                                                                     \n")
        self.f_file.write("     uvm_active_passive_enum is_active=UVM_ACTIVE;                                   \n")
        self.f_file.write("                                                                                     \n")
        self.f_file.write("     %s_sequencer    %s_seqr;                                                        \n" % (InArray[0], InArray[0]))
        self.f_file.write("     %s_driver       %s_drv;                                                         \n" % (InArray[0], InArray[0]))
        self.f_file.write("     %s_monitor      %s_mon;                                                         \n" % (InArray[0], InArray[0]))
        self.f_file.write("                                                                                     \n")
        self.f_file.write("     typedef virtual %s_vif          v_if;                                           \n" % InArray[0])
        self.f_file.write("                                                                                     \n")
        self.f_file.write("     `uvm_component_utils_begin(%s_agent)                                            \n" % InArray[0])
        self.f_file.write("         `uvm_field_object(%s_seqr,UVM_ALL_ON)                                       \n" % InArray[0])
        self.f_file.write("         `uvm_field_object(%s_drv,UVM_ALL_ON)                                        \n" % InArray[0])
        self.f_file.write("         `uvm_field_object(%s_mon,UVM_ALL_ON)                                        \n" % InArray[0])
        self.f_file.write("     `uvm_component_utils_end                                                        \n")
        self.f_file.write("                                                                                     \n")
        self.f_file.write("     function new(string name =\" %s_agent\",uvm_component parent=null);             \n" % InArray[0])
        self.f_file.write("         super.new(name);                                                            \n")
        self.f_file.write("     endfunction                                                                     \n")
        self.f_file.write("                                                                                     \n")
        self.f_file.write("     extern virtual function void build_phase(uvm_phase phase);                      \n")
        self.f_file.write("     extern virtual function void connect_phase(uvm_phase phase);                    \n")
        self.f_file.write("     extern virtual task          run_phase(uvm_phase phase);                        \n")
        self.f_file.write("     extern virtual function void report_phase(uvm_phase phase);                     \n")
        self.f_file.write("                                                                                     \n")
        self.f_file.write("endclass                                                                             \n")
        self.f_file.write("                                                                                     \n")
        self.f_file.write("function void %s_agent::build_phase(uvm_phase phase);                                \n" % InArray[0])
        self.f_file.write("     super.build_phase(phase);                                                       \n")
        self.f_file.write("     %s_mon=%s_monitor::type_id::create(\"%s_mon\",this);                            \n" % (InArray[0], InArray[0], InArray[0]))
        self.f_file.write("     uvm_config_db#(uvm_active_passive_enum)::get(this,\"\",\"is_active\",is_active);\n")
        self.f_file.write("     if(is_active==UVM_ACTIVE)                                                       \n")
        self.f_file.write("         begin                                                                       \n")
        self.f_file.write("             %s_seqr=%s_sequencer::type_id_create(\"%s_seqr\",this);                 \n" % (InArray[0], InArray[0], InArray[0]))
        self.f_file.write("             %s_drv=%s_driver::type_id_create(\"%s_drv\",this);                      \n" % (InArray[0], InArray[0], InArray[0]))
        self.f_file.write("         end                                                                         \n")
        self.f_file.write("endfunction                                                                          \n")
        self.f_file.write("                                                                                     \n")
        self.f_file.write("function void %s_agent::connect_phase(uvm_phase phase);                              \n" % InArray[0])
        self.f_file.write("     super.connect_phase(phase);                                                     \n")
        self.f_file.write("     if(is_active==UVM_ACTIVE)                                                       \n")
        self.f_file.write("         begin                                                                       \n")
        self.f_file.write("             %s_drv.seq_item_port.connect(%s_seqr.seq_item_export);                  \n" % (InArray[0], InArray[0]))
        self.f_file.write("             %s_drv.rsp_port.connect(%s_seqr.rsp_export);                            \n" % (InArray[0], InArray[0]))
        self.f_file.write("         end                                                                         \n")
        self.f_file.write("endfunction                                                                          \n")
        self.f_file.write("                                                                                     \n")
        self.f_file.write("task %s_agent::run_phase(uvm_phase phase);                                           \n" % InArray[0])
        self.f_file.write("     super.run_phase(phase);                                                         \n")
        self.f_file.write("     phase.raise_objection(this,\"%s_agent\");                                       \n" % InArray[0])
        self.f_file.write("     //add here                                                                      \n")
        self.f_file.write("     phase.drop_objection(this,\"\");                                                \n")
        self.f_file.write("endtask                                                                              \n")
        self.f_file.write("                                                                                     \n")
        self.f_file.write("function void %s_agent::report_phase(uvm_phase phase);                               \n" % InArray[0])
        self.f_file.write("     super.report_phase(phase);                                                      \n")
        self.f_file.write("endfunction                                                                          \n")
        self.f_file.write("                                                                                     \n")
        self.f_file.write("`endif                                                                               \n")
        self.f_file.close()

    def f_gen_vip_seqlib(self, InArray):
        print("gen %s_sequence_lib.sv" % (InArray[0]))
        #        os.chdir(self.local_dir)
        file_name = InArray[0] + "_sequence_lib.sv"
        self.f_file = open(file_name, "w+")

        self.f_file.write("`ifndef _%s_SEQUENCE_LIB_V_                                                          \n" % (InArray[0].upper()))
        self.f_file.write("`define _%s_SEQUENCE_LIB_V_                                                          \n" % (InArray[0].upper()))
        self.f_file.write("                                                                                     \n")
        self.f_file.write("class %s_base_seq extends uvm_sequence#(%s_trans);                                   \n" % (InArray[0], InArray[0]))
        self.f_file.write("                                                                                     \n")
        self.f_file.write("     %s_config   %s_cfg;                                                             \n" % (InArray[0], InArray[0]))
        self.f_file.write("                                                                                     \n")
        self.f_file.write("     `uvm_object_utils_begin(%s_base_seq)                                            \n" % InArray[0])
        self.f_file.write("         `uvm_field_object(%s_cfg,UVM_DEFAULT)                                       \n" % InArray[0])
        self.f_file.write("     `uvm_cobject_utils_end                                                          \n")
        self.f_file.write("                                                                                     \n")
        self.f_file.write("     function new(string name =\"%s_base_seq\");                                     \n" % InArray[0])
        self.f_file.write("         super.new(name);                                                            \n")
        self.f_file.write("     endfunction                                                                     \n")
        self.f_file.write("                                                                                     \n")
        self.f_file.write("     virtual task pre_body();                                                        \n")
        self.f_file.write("         `uvm_info(get_full_name(),\"pre_body\",UVM_LOW)                             \n")
        self.f_file.write("         if(starting_phase!=null)                                                    \n")
        self.f_file.write("             starting_phase.raise_objectiong(this);                                  \n")
        self.f_file.write("                                                                                     \n")
        self.f_file.write("         if(!uvm_config_db#(%s_config)::get(null,get_full_name(),\"%s_config\",%s_cfg))\n" % (InArray[0], InArray[0], InArray[0]))
        self.f_file.write("             `uvm_fatal(get_type_name(),\"can not get %s_config pbject\")            \n" % InArray[0])
        self.f_file.write("                                                                                     \n")
        self.f_file.write("      endtask                                                                        \n")
        self.f_file.write("                                                                                     \n")
        self.f_file.write("     virtual task pre_body();                                                        \n")
        self.f_file.write("         `uvm_info(get_full_name(),\"post_body\",UVM_LOW)                            \n")
        self.f_file.write("         if(starting_phase!=null)                                                    \n")
        self.f_file.write("             starting_phase.drop_objectiong(this);                                   \n")
        self.f_file.write("                                                                                     \n")
        self.f_file.write("      endtask                                                                        \n")
        self.f_file.write("                                                                                     \n")
        self.f_file.write("endclass                                                                             \n")
        self.f_file.write("                                                                                     \n")
        self.f_file.write("`endif                                                                               \n")
        self.f_file.close()

    def f_gen_vip_config(self, InArray):
        print("gen %s_config.sv" % (InArray[0]))
        #        os.chdir(self.local_dir)
        file_name = InArray[0] + "_config.sv"
        self.f_file = open(file_name, "w+")

        self.f_file.write("`ifndef _%s_CONFIG_V_                                                                \n" % (InArray[0].upper()))
        self.f_file.write("`define _%s_CONFIG_V_                                                                \n" % (InArray[0].upper()))
        self.f_file.write("                                                                                     \n")
        self.f_file.write("class %s_config extends uvm_object;                                                  \n" % InArray[0])
        self.f_file.write("                                                                                     \n")
        self.f_file.write(" //rand logic[7:0]   aaa;                                                            \n")
        self.f_file.write(" //constraint        xxx{};                                                          \n")
        self.f_file.write("                                                                                     \n")
        self.f_file.write("     `uvm_object_utils_begin(%s_CONFIG)                                              \n" % InArray[0])
        self.f_file.write("      //`uvm_field_object(%s_AAA,UVM_all_on)                                         \n" % InArray[0])
        self.f_file.write("     `uvm_cobject_utils_end                                                          \n")
        self.f_file.write("                                                                                     \n")
        self.f_file.write("     function new(string name =\"%s_config\");                                       \n" % InArray[0])
        self.f_file.write("         super.new(name);                                                            \n")
        self.f_file.write("         //aaa=0;                                                                    \n")
        self.f_file.write("     endfunction                                                                     \n")
        self.f_file.write("                                                                                     \n")
        self.f_file.write("endclass                                                                             \n")
        self.f_file.write("                                                                                     \n")
        self.f_file.write("`endif                                                                               \n")
        self.f_file.close()

    def f_gen_vip_filelist(self, InArray):
        print("gen %s_UvcTop.sv" % (InArray[0]))
        #        os.chdir(self.local_dir)
        file_name = InArray[0] + "_UvcTop.sv"
        self.f_file = open(file_name, "w+")

        self.f_file.write("`ifndef _%s_UVC_TOP_V_                                     \n" % (InArray[0].upper()))
        self.f_file.write("`define _%s_UVC_TOP_V_                                     \n" % (InArray[0].upper()))
        self.f_file.write("                                                           \n")
        self.f_file.write("`incluide \"uvm_macros.svh\"                               \n")
        self.f_file.write("                                                           \n")
        self.f_file.write("package %s_UvcTop;                                         \n" % InArray[0])
        self.f_file.write("     import uvm_pkg::*;                                    \n")
        self.f_file.write("                                                           \n")
        self.f_file.write("     typedef class %s_agent;                               \n" % InArray[0])
        self.f_file.write("     typedef class %s_driver;                              \n" % InArray[0])
        self.f_file.write("     typedef class %s_monitor;                             \n" % InArray[0])
        self.f_file.write("     typedef class %s_sequencer;                           \n" % InArray[0])
        self.f_file.write("     typedef class %s_trans;                               \n" % InArray[0])
        self.f_file.write("     typedef class %s_base_seq;                            \n" % InArray[0])
        self.f_file.write("     typedef class %s_config;                              \n" % InArray[0])
        self.f_file.write("     //typedef class %s_vif;                               \n" % InArray[0])
        self.f_file.write("                                                           \n")
        self.f_file.write("     `include \"%s_agent.sv\"                              \n" % InArray[0])
        self.f_file.write("     `include \"%s_driver.sv\"                             \n" % InArray[0])
        self.f_file.write("     `include \"%s_monitor.sv\"                            \n" % InArray[0])
        self.f_file.write("     `include \"%s_sequencer.sv\"                          \n" % InArray[0])
        self.f_file.write("     `include \"%s_trans.sv\"                              \n" % InArray[0])
        self.f_file.write("     `include \"%s_sequence_lib.sv\"                       \n" % InArray[0])
        self.f_file.write("     `include \"%s_config.sv\"                             \n" % InArray[0])
        self.f_file.write("     //`include \"%s_vif.sv\"                              \n" % InArray[0])
        self.f_file.write("                                                           \n")
        self.f_file.write("endpackage                                                 \n")
        self.f_file.write("                                                           \n")
        self.f_file.write("`endif                                                     \n")
        self.f_file.close()

    def f_capture_vip(self):
        #       vip_name_list = input("Enter your vip name list")
        #       print("receiced vip name list is %s\n" % vip_name_list)
        #       vip_name = vip_name_list.split(' ')
        #       for i in range(len(vip_name))

        # # up uvc name by wangxx
        # # T0D0:copy ahb/axi common uvc
        ahb_num = 0
        axi_num = 0
        apb_num = 0
        for index in range(len(self.InArray)):
            if self.InArray[index][0][0:3] != 'ahb' and self.InArray[index][0][0:3] != 'axi' and self.InArray[index][0][0:3] != 'apb':
                if not os.path.isdir(self.InArray[index][0]):
                    os.mkdir(self.InArray[index][0])
                os.chdir(self.InArray[index][0])
                # print("?????????????????????????????????????????????????")
                # print("************Current dir is : %s" % os.getcwd())
                self.f_gen_vip_agent(self.InArray[index])
                self.f_gen_vip_vif(self.InArray[index])
                self.f_gen_vip_monr(self.InArray[index])
                self.f_gen_vip_dvr(self.InArray[index])
                self.f_gen_vip_seqr(self.InArray[index])
                self.f_gen_vip_trans(self.InArray[index])
                self.f_gen_vip_seqlib(self.InArray[index])
                self.f_gen_vip_config(self.InArray[index])
                self.f_gen_vip_filelist(self.InArray[index])
                os.chdir('./../')
            if self.InArray[index][0][0:3] == 'ahb' and ahb_num is 0:
                ahb_info = self.InArray[index][0].split("#", 2)
                if not os.path.isdir(ahb_info[0]):
                    os.mkdir(ahb_info[0])
                os.chdir(ahb_info[0])

                # linux format
                # os.system('cp ../../../../common/script/vip/%s/* ./' % (ahb_info[0]))
                # windows format
                os.system('cp ..\..\..\..\common\script\\vip\%s\* .' % (ahb_info[0]))

                os.chdir('./../')
                ahb_num += 1
            if self.InArray[index][0][0:3] == 'axi' and axi_num is 0:
                axi_info = self.InArray[index][0].split("#", 2)
                if not os.path.isdir(axi_info[0]):
                    os.mkdir(axi_info[0])
                os.chdir(axi_info[0])

                # linux format
                # os.system('cp ../../../../common/script/vip/%s/* ./' % (axi_info[0]))
                # windows format
                os.system('cp ..\..\..\..\common\script\\vip\%s\* .' % (axi_info[0]))

                os.chdir('./../')
                axi_num += 1
            if self.InArray[index][0][0:3] == 'apb' and apb_num is 0:
                apb_info = self.InArray[index][0].split("#", 2)
                if not os.path.isdir(apb_info[0]):
                    os.mkdir(apb_info[0])
                os.chdir(apb_info[0])

                # linux format
                # os.system('cp ../../../../common/script/vip/%s/* ./' % (apb_info[0]))
                # windows format

                os.system('cp ..\..\..\..\common\script\\vip\%s\* .' % (apb_info[0]))
                os.chdir('./../')
                apb_num += 1


def main(tb_name, InArray, novifArray, module_name):
    print("gen_vip_file.main")
    g_vip_file = gen_vip_file(tb_name, InArray, novifArray, module_name)
    g_vip_file.f_capture_vip()


if __name__ == '__main__':
    print("gen_vip_file")
    tb_name = 'rce_cmu'
    main(tb_name)


# ####################################################
# # add by wangxx at 2022-02-08
#
#
# if __name__ == 'gen_vip_file':
#     print("gen_vip_file")
#     tb_name = 'rce_cmu'
#     InArray = []
#     novifArray = []
#     module_name = []
#     main(tb_name, InArray, novifArray, module_name)
